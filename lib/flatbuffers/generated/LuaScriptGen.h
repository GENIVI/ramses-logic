// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LUASCRIPT_RLOGIC_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_LUASCRIPT_RLOGIC_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

#include "PropertyGen.h"

namespace rlogic_serialization {

struct LuaScript;
struct LuaScriptBuilder;

struct LuaScript FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LuaScriptBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_FILENAME = 6,
    VT_LUASOURCECODE = 8,
    VT_ROOTINPUT = 10,
    VT_ROOTOUTPUT = 12
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *filename() const {
    return GetPointer<const flatbuffers::String *>(VT_FILENAME);
  }
  const flatbuffers::String *luaSourceCode() const {
    return GetPointer<const flatbuffers::String *>(VT_LUASOURCECODE);
  }
  const rlogic_serialization::Property *rootInput() const {
    return GetPointer<const rlogic_serialization::Property *>(VT_ROOTINPUT);
  }
  const rlogic_serialization::Property *rootOutput() const {
    return GetPointer<const rlogic_serialization::Property *>(VT_ROOTOUTPUT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_FILENAME) &&
           verifier.VerifyString(filename()) &&
           VerifyOffset(verifier, VT_LUASOURCECODE) &&
           verifier.VerifyString(luaSourceCode()) &&
           VerifyOffset(verifier, VT_ROOTINPUT) &&
           verifier.VerifyTable(rootInput()) &&
           VerifyOffset(verifier, VT_ROOTOUTPUT) &&
           verifier.VerifyTable(rootOutput()) &&
           verifier.EndTable();
  }
};

struct LuaScriptBuilder {
  typedef LuaScript Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(LuaScript::VT_NAME, name);
  }
  void add_filename(flatbuffers::Offset<flatbuffers::String> filename) {
    fbb_.AddOffset(LuaScript::VT_FILENAME, filename);
  }
  void add_luaSourceCode(flatbuffers::Offset<flatbuffers::String> luaSourceCode) {
    fbb_.AddOffset(LuaScript::VT_LUASOURCECODE, luaSourceCode);
  }
  void add_rootInput(flatbuffers::Offset<rlogic_serialization::Property> rootInput) {
    fbb_.AddOffset(LuaScript::VT_ROOTINPUT, rootInput);
  }
  void add_rootOutput(flatbuffers::Offset<rlogic_serialization::Property> rootOutput) {
    fbb_.AddOffset(LuaScript::VT_ROOTOUTPUT, rootOutput);
  }
  explicit LuaScriptBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LuaScriptBuilder &operator=(const LuaScriptBuilder &);
  flatbuffers::Offset<LuaScript> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LuaScript>(end);
    return o;
  }
};

inline flatbuffers::Offset<LuaScript> CreateLuaScript(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> filename = 0,
    flatbuffers::Offset<flatbuffers::String> luaSourceCode = 0,
    flatbuffers::Offset<rlogic_serialization::Property> rootInput = 0,
    flatbuffers::Offset<rlogic_serialization::Property> rootOutput = 0) {
  LuaScriptBuilder builder_(_fbb);
  builder_.add_rootOutput(rootOutput);
  builder_.add_rootInput(rootInput);
  builder_.add_luaSourceCode(luaSourceCode);
  builder_.add_filename(filename);
  builder_.add_name(name);
  return builder_.Finish();
}

struct LuaScript::Traits {
  using type = LuaScript;
  static auto constexpr Create = CreateLuaScript;
};

inline flatbuffers::Offset<LuaScript> CreateLuaScriptDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *filename = nullptr,
    const char *luaSourceCode = nullptr,
    flatbuffers::Offset<rlogic_serialization::Property> rootInput = 0,
    flatbuffers::Offset<rlogic_serialization::Property> rootOutput = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto filename__ = filename ? _fbb.CreateString(filename) : 0;
  auto luaSourceCode__ = luaSourceCode ? _fbb.CreateString(luaSourceCode) : 0;
  return rlogic_serialization::CreateLuaScript(
      _fbb,
      name__,
      filename__,
      luaSourceCode__,
      rootInput,
      rootOutput);
}

}  // namespace rlogic_serialization

#endif  // FLATBUFFERS_GENERATED_LUASCRIPT_RLOGIC_SERIALIZATION_H_
