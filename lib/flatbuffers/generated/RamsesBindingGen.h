// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RAMSESBINDING_RLOGIC_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_RAMSESBINDING_RLOGIC_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

#include "PropertyGen.h"
#include "RamsesReferenceGen.h"

namespace rlogic_serialization {

struct RamsesBinding;
struct RamsesBindingBuilder;

struct RamsesBinding FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RamsesBindingBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_BOUNDRAMSESOBJECT = 6,
    VT_ROOTINPUT = 8
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const rlogic_serialization::RamsesReference *boundRamsesObject() const {
    return GetPointer<const rlogic_serialization::RamsesReference *>(VT_BOUNDRAMSESOBJECT);
  }
  const rlogic_serialization::Property *rootInput() const {
    return GetPointer<const rlogic_serialization::Property *>(VT_ROOTINPUT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_BOUNDRAMSESOBJECT) &&
           verifier.VerifyTable(boundRamsesObject()) &&
           VerifyOffset(verifier, VT_ROOTINPUT) &&
           verifier.VerifyTable(rootInput()) &&
           verifier.EndTable();
  }
};

struct RamsesBindingBuilder {
  typedef RamsesBinding Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(RamsesBinding::VT_NAME, name);
  }
  void add_boundRamsesObject(flatbuffers::Offset<rlogic_serialization::RamsesReference> boundRamsesObject) {
    fbb_.AddOffset(RamsesBinding::VT_BOUNDRAMSESOBJECT, boundRamsesObject);
  }
  void add_rootInput(flatbuffers::Offset<rlogic_serialization::Property> rootInput) {
    fbb_.AddOffset(RamsesBinding::VT_ROOTINPUT, rootInput);
  }
  explicit RamsesBindingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RamsesBindingBuilder &operator=(const RamsesBindingBuilder &);
  flatbuffers::Offset<RamsesBinding> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RamsesBinding>(end);
    return o;
  }
};

inline flatbuffers::Offset<RamsesBinding> CreateRamsesBinding(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<rlogic_serialization::RamsesReference> boundRamsesObject = 0,
    flatbuffers::Offset<rlogic_serialization::Property> rootInput = 0) {
  RamsesBindingBuilder builder_(_fbb);
  builder_.add_rootInput(rootInput);
  builder_.add_boundRamsesObject(boundRamsesObject);
  builder_.add_name(name);
  return builder_.Finish();
}

struct RamsesBinding::Traits {
  using type = RamsesBinding;
  static auto constexpr Create = CreateRamsesBinding;
};

inline flatbuffers::Offset<RamsesBinding> CreateRamsesBindingDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    flatbuffers::Offset<rlogic_serialization::RamsesReference> boundRamsesObject = 0,
    flatbuffers::Offset<rlogic_serialization::Property> rootInput = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return rlogic_serialization::CreateRamsesBinding(
      _fbb,
      name__,
      boundRamsesObject,
      rootInput);
}

}  // namespace rlogic_serialization

#endif  // FLATBUFFERS_GENERATED_RAMSESBINDING_RLOGIC_SERIALIZATION_H_
