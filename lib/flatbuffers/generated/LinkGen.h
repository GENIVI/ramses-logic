// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LINK_RLOGIC_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_LINK_RLOGIC_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

#include "PropertyGen.h"

namespace rlogic_serialization {

struct Link;
struct LinkBuilder;

struct Link FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LinkBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SOURCEPROPERTY = 4,
    VT_TARGETPROPERTY = 6
  };
  const rlogic_serialization::Property *sourceProperty() const {
    return GetPointer<const rlogic_serialization::Property *>(VT_SOURCEPROPERTY);
  }
  const rlogic_serialization::Property *targetProperty() const {
    return GetPointer<const rlogic_serialization::Property *>(VT_TARGETPROPERTY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SOURCEPROPERTY) &&
           verifier.VerifyTable(sourceProperty()) &&
           VerifyOffset(verifier, VT_TARGETPROPERTY) &&
           verifier.VerifyTable(targetProperty()) &&
           verifier.EndTable();
  }
};

struct LinkBuilder {
  typedef Link Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sourceProperty(flatbuffers::Offset<rlogic_serialization::Property> sourceProperty) {
    fbb_.AddOffset(Link::VT_SOURCEPROPERTY, sourceProperty);
  }
  void add_targetProperty(flatbuffers::Offset<rlogic_serialization::Property> targetProperty) {
    fbb_.AddOffset(Link::VT_TARGETPROPERTY, targetProperty);
  }
  explicit LinkBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LinkBuilder &operator=(const LinkBuilder &);
  flatbuffers::Offset<Link> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Link>(end);
    return o;
  }
};

inline flatbuffers::Offset<Link> CreateLink(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<rlogic_serialization::Property> sourceProperty = 0,
    flatbuffers::Offset<rlogic_serialization::Property> targetProperty = 0) {
  LinkBuilder builder_(_fbb);
  builder_.add_targetProperty(targetProperty);
  builder_.add_sourceProperty(sourceProperty);
  return builder_.Finish();
}

struct Link::Traits {
  using type = Link;
  static auto constexpr Create = CreateLink;
};

}  // namespace rlogic_serialization

#endif  // FLATBUFFERS_GENERATED_LINK_RLOGIC_SERIALIZATION_H_
