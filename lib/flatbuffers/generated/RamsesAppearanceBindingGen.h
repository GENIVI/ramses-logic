// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RAMSESAPPEARANCEBINDING_RLOGIC_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_RAMSESAPPEARANCEBINDING_RLOGIC_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

#include "PropertyGen.h"
#include "RamsesBindingGen.h"
#include "RamsesReferenceGen.h"

namespace rlogic_serialization {

struct ResourceId;

struct RamsesAppearanceBinding;
struct RamsesAppearanceBindingBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) ResourceId FLATBUFFERS_FINAL_CLASS {
 private:
  uint64_t resourceIdLow_;
  uint64_t resourceIdHigh_;

 public:
  ResourceId() {
    memset(static_cast<void *>(this), 0, sizeof(ResourceId));
  }
  ResourceId(uint64_t _resourceIdLow, uint64_t _resourceIdHigh)
      : resourceIdLow_(flatbuffers::EndianScalar(_resourceIdLow)),
        resourceIdHigh_(flatbuffers::EndianScalar(_resourceIdHigh)) {
  }
  uint64_t resourceIdLow() const {
    return flatbuffers::EndianScalar(resourceIdLow_);
  }
  uint64_t resourceIdHigh() const {
    return flatbuffers::EndianScalar(resourceIdHigh_);
  }
};
FLATBUFFERS_STRUCT_END(ResourceId, 16);

struct RamsesAppearanceBinding FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RamsesAppearanceBindingBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BASE = 4,
    VT_PARENTEFFECTID = 6
  };
  const rlogic_serialization::RamsesBinding *base() const {
    return GetPointer<const rlogic_serialization::RamsesBinding *>(VT_BASE);
  }
  const rlogic_serialization::ResourceId *parentEffectId() const {
    return GetStruct<const rlogic_serialization::ResourceId *>(VT_PARENTEFFECTID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BASE) &&
           verifier.VerifyTable(base()) &&
           VerifyField<rlogic_serialization::ResourceId>(verifier, VT_PARENTEFFECTID) &&
           verifier.EndTable();
  }
};

struct RamsesAppearanceBindingBuilder {
  typedef RamsesAppearanceBinding Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_base(flatbuffers::Offset<rlogic_serialization::RamsesBinding> base) {
    fbb_.AddOffset(RamsesAppearanceBinding::VT_BASE, base);
  }
  void add_parentEffectId(const rlogic_serialization::ResourceId *parentEffectId) {
    fbb_.AddStruct(RamsesAppearanceBinding::VT_PARENTEFFECTID, parentEffectId);
  }
  explicit RamsesAppearanceBindingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RamsesAppearanceBindingBuilder &operator=(const RamsesAppearanceBindingBuilder &);
  flatbuffers::Offset<RamsesAppearanceBinding> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RamsesAppearanceBinding>(end);
    return o;
  }
};

inline flatbuffers::Offset<RamsesAppearanceBinding> CreateRamsesAppearanceBinding(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<rlogic_serialization::RamsesBinding> base = 0,
    const rlogic_serialization::ResourceId *parentEffectId = 0) {
  RamsesAppearanceBindingBuilder builder_(_fbb);
  builder_.add_parentEffectId(parentEffectId);
  builder_.add_base(base);
  return builder_.Finish();
}

struct RamsesAppearanceBinding::Traits {
  using type = RamsesAppearanceBinding;
  static auto constexpr Create = CreateRamsesAppearanceBinding;
};

}  // namespace rlogic_serialization

#endif  // FLATBUFFERS_GENERATED_RAMSESAPPEARANCEBINDING_RLOGIC_SERIALIZATION_H_
